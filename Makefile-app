##### Project #####

PY32F0_TEMPLATE	?= py32f0-project/

PROJECT			?= app-launch-bl
# The path for generated files
BUILD_DIR		= Build-$(PROJECT)

MCU_TYPE		= PY32F002Ax5

##### Options #####

# Use LL library instead of HAL, y:yes, n:no
USE_LL_LIB ?= n
# Enable printf float %f support, y:yes, n:no
ENABLE_PRINTF_FLOAT	?= n
# Build with FreeRTOS, y:yes, n:no
USE_FREERTOS	?= n
# Build with CMSIS DSP functions, y:yes, n:no
USE_DSP			?= n
# Build with Waveshare e-paper lib, y:yes, n:no
USE_EPAPER		?= n
# Programmer, jlink or pyocd
FLASH_PROGRM	?= pyocd

##### Toolchains #######

ARM_TOOLCHAIN	?= /usr/bin

# path to JLinkExe
JLINKEXE		?= /opt/SEGGER/JLink/JLinkExe
# path to PyOCD
PYOCD_EXE		?= pyocd

##### Paths ############

# C and CPP source folders
CDIRS		:=
# Single C and CPP source files
CFILES		:= 
CPPFILES	:= 

# ASM source folders
ADIRS		:= 
# Single ASM source files
AFILES		:= 

# Include paths
INCLUDES	:= $(PY32F0_TEMPLATE)Libraries/CMSIS/Core/Include \
			$(PY32F0_TEMPLATE)Libraries/CMSIS/Device/PY32F0xx/Include \
			$(CDIRS)

##### Library Paths ############

# Library flags
LIB_FLAGS		= $(MCU_TYPE)
# JLink device (Uppercases)
JLINK_DEVICE	?= $(shell echo $(MCU_TYPE) | tr '[:lower:]' '[:upper:]')
# PyOCD device (Lowercases)
PYOCD_DEVICE	?= $(shell echo $(MCU_TYPE) | tr '[:upper:]' '[:lower:]')
# Link descript file: 
LDSCRIPT		= py32f002ax5-baofeng-app-bare.ld

AFILES	:= sample-app-launch-bl.s

# PY32F002A,003,030 <<<

include $(PY32F0_TEMPLATE)rules.mk
